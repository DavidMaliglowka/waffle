rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is a member of any chat with the target user
    function isConnectedUser(targetUserId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/chats/$(request.auth.uid + '_' + targetUserId)) ||
             exists(/databases/$(database)/documents/chats/$(targetUserId + '_' + request.auth.uid));
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own profile completely
      allow read, write: if isOwner(userId);
      
      // Authenticated users can read basic profile info of other users
      // This allows chat list to display friend names and avatars
      allow read: if isAuthenticated() && 
        // Only allow reading basic profile fields, not sensitive ones
        request.auth.uid != userId;
    }
    
    // Chats collection - users can only access chats they're members of
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid in resource.data.members;
      
      // Allow create if the user is one of the members
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.members &&
        request.resource.data.members.size() == 2; // Only 1-to-1 chats in MVP
      
      // Videos subcollection - members can read all, but only sender can create
      match /videos/{videoId} {
        // Members can read all videos in their chats
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        
        // Only the sender can create their own video
        allow create: if isAuthenticated() && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
          
        // Videos can be updated to mark as expired (for cleanup functions)
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members &&
          // Only allow updating the isExpired field
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isExpired']);
      }
    }
    
    // Security rules for batch operations and admin functions
    // Cloud Functions will use admin SDK, so these rules don't apply to server-side operations
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}